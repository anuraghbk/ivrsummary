# -*- coding: utf-8 -*-
"""genai ivr summary ui.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I0hryRyosWZHAtjnxDV39TZlYU6M3tW2
"""

!pip install gradio

from pyngrok import ngrok

ngrok.set_auth_token("1quxRyFJpZDJAgbvjs854Ew0085_9i7T1j8gueLn1JE5mr8Q")

ngrok.kill()

import gradio as gr
from pyngrok import ngrok
import time

ngrok.kill()

# Hardcoded list of customer actions and corresponding icons
customer_actions = [
    {"action": "Customer dialed the support number.", "icon": "üìû"},
    {"action": "Navigated through IVR options.", "icon": "üõ†Ô∏è"},
    {"action": "Selected option for 'Credit Card Issue'.", "icon": "üí≥"},
    {"action": "Provided account number for verification.", "icon": "üî¢"},
    {"action": "Pressed '0' to speak with an agent.", "icon": "üë§"}
]

# Hardcoded GenAI summary
summary_text = (
    "Customer is calling about an issue with their credit card. "
    "They have navigated through the IVR system and provided their account number. "
    "Customer is awaiting assistance from an agent."
)

# Hardcoded potential remediation text
remediation_text = (
    "It is recommended to provide the customer with a step-by-step troubleshooting guide for their credit card issue. "
    "Offer to escalate the issue to a senior agent if required."
)

# Function to simulate displaying actions and summarizing them
def start_demo():
    actions_displayed = ""
    for action in customer_actions:
        # Display each action with an icon
        actions_displayed += f'<div style="padding: 10px; border: 2px solid #4CAF50; margin: 5px; background-color: #f0f8ff; border-radius: 10px;">' \
                             f'<span style="font-size: 20px;">{action["icon"]}</span> {action["action"]}</div>'
        # Delay for 3 seconds for each action
        time.sleep(3)  # 3-second delay between actions
        yield actions_displayed, "", ""  # Yield actions, and no summary or remediation yet

    # After all actions, show the summary and remediation
    yield actions_displayed, summary_text, remediation_text

# Create a Gradio interface with title and button
with gr.Blocks() as demo:
    gr.Markdown("<h1 style='text-align:center;'>GenAI Customer Interaction Demo</h1>")  # Title at the top
    start_button = gr.Button("Start Demo", elem_id="start-demo-btn")  # Start Demo button

    # Create a row layout for splitting actions and summary
    with gr.Row():
        # Left side for actions
        with gr.Column():
            gr.Markdown("<h2>Customer Actions</h2>")
            actions_output = gr.HTML()  # Output for customer actions

        # Right side for summary and remediation
        with gr.Column():
            gr.Markdown("<h2>Customer IVR Experience Summary</h2>")
            summary_output = gr.Textbox(interactive=False, label='')  # Output for GenAI summary (read-only)
            gr.Markdown("<h2>Potential Remediation</h2>")
            remediation_output = gr.Textbox(interactive=False, label='')  # Output for remediation (read-only)

    # Link the button to the function
    start_button.click(start_demo, outputs=[actions_output, summary_output, remediation_output])  # When button is clicked, trigger demo

# Launch the Gradio app
port = 7863
demo.launch(server_name="0.0.0.0", server_port=port, share=False)

# Expose the Gradio app using ngrok
public_url = ngrok.connect(port)

# Output the public URL where the app can be accessed
print(f"Gradio app is running at {public_url}")